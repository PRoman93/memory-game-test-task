{"version":3,"sources":["ui/gamePage/cards/Cards.module.css","ui/gamePage/cards/card/Card.module.css","ui/gamePage/GamePage.module.css","assets/images/austria.svg","assets/images/belarus.svg","assets/images/belgium.svg","assets/images/brazil.svg","assets/images/britain.svg","assets/images/france.svg","assets/images/spain.svg","assets/images/japan.svg","assets/sounds/click.mp3","ui/common/Button.module.css","assets/sounds/Sound_20947.mp3","assets/sounds/Dawn.mp3","ui/gamePage/cards/card/Card.tsx","assets/constants/constants.js","dal/cardsReducer.ts","ui/gamePage/cards/card/CardContainer.tsx","ui/gamePage/cards/Cards.tsx","ui/common/Button.js","ui/gamePage/cards/CardsContainer.tsx","ui/gamePage/GamePage.tsx","ui/gamePage/GamePageContainer.tsx","App.tsx","serviceWorker.js","dal/store.ts","index.tsx"],"names":["module","exports","Card","props","classForCard","card","isSelected","styles","openedCard","className","onClick","openCard","src","img","alt","title","isActive","showedCard","closedCard","MATCH_CARDS","initialState","cards","id","img_1","img_2","img_3","img_4","img_5","img_6","img_7","img_8","countClick","loading","cardsReducer","state","action","type","activeCard","map","showedCards","filter","newCards","counterValue","randomCardPosition","random","array","i","length","j","Math","floor","showCard","dispatch","getState","showCards","reducer","openFirstCard","setTimeout","CardContainer","useDispatch","Audio","click","play","Cards","cardsElements","key","classForCards","Button","button","text","CardsContainer","useState","start","setStart","useSelector","every","contentWrapper","winSound","autoPlay","header","GamePage","gamePage","counter","onStartClick","GamePageContainer","music","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.697da495.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__3vrv5\",\"loading\":\"Cards_loading__1qKSa\",\"contentWrapper\":\"Cards_contentWrapper__8b-bC\",\"header\":\"Cards_header__3Claf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1yi2Q\",\"showedCard\":\"Card_showedCard__3hkn0\",\"closedCard\":\"Card_closedCard__3HUoz\",\"openedCard\":\"Card_openedCard__1pp25\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePage\":\"GamePage_gamePage__3ycbM\",\"counter\":\"GamePage_counter__2H0QF\"};","module.exports = __webpack_public_path__ + \"static/media/austria.d4e38133.svg\";","module.exports = __webpack_public_path__ + \"static/media/belarus.817a309b.svg\";","module.exports = __webpack_public_path__ + \"static/media/belgium.07d92126.svg\";","module.exports = __webpack_public_path__ + \"static/media/brazil.4fc1c111.svg\";","module.exports = __webpack_public_path__ + \"static/media/britain.5e845b41.svg\";","module.exports = __webpack_public_path__ + \"static/media/france.36d6d563.svg\";","module.exports = __webpack_public_path__ + \"static/media/spain.8953ff1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/japan.ae5b37f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/click.429827e6.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__p7SRv\"};","module.exports = __webpack_public_path__ + \"static/media/Sound_20947.f314c1fd.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Dawn.58e2ca2f.mp3\";","import React from 'react';\r\nimport styles from './Card.module.css'\r\nimport {cardType} from \"../../../../types/cardsReducerTypes\";\r\n\r\ntype PropType = {\r\n    card: cardType\r\n    openCard: () => void\r\n}\r\nconst Card: React.FC<PropType> = (props) => {\r\n\r\n\r\n    const classForCard = props.card.isSelected ? `${styles.openedCard} ${styles.card}` : styles.card\r\n\r\n    return (\r\n        <div className={classForCard} onClick={props.openCard}>\r\n            <img src={props.card.img} alt={props.card.title}\r\n                 className={props.card.isActive ? styles.showedCard : styles.closedCard}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Card\r\n","export const FIRST_CARD_SHOW = 'playReducer/FIRST-CARD-SHOW'\r\nexport const MATCH_CARDS = 'playReducer/MATCH-CARDS'\r\nexport const LOADING_IN_PROCESS = 'playReducer/LOADING-IN-PROCESS'\r\nexport const VICTORY_COMPLETE = 'playReducer/VICTORY-COMPLETE'\r\nexport const SET_RANDOM_POSITION_FOR_CARDS = 'playReducer/SET_RANDOM-POSITION-FOR-CARDS'\r\n","import {\r\n    FIRST_CARD_SHOW,\r\n    LOADING_IN_PROCESS,\r\n    MATCH_CARDS,\r\n    SET_RANDOM_POSITION_FOR_CARDS,\r\n    VICTORY_COMPLETE\r\n} from \"../assets/constants/constants\";\r\n\r\nimport img_1 from '../assets/images/austria.svg'\r\nimport img_2 from '../assets/images/belarus.svg'\r\nimport img_3 from '../assets/images/belgium.svg'\r\nimport img_4 from '../assets/images/brazil.svg'\r\nimport img_5 from '../assets/images/britain.svg'\r\nimport img_6 from '../assets/images/france.svg'\r\nimport img_7 from '../assets/images/spain.svg'\r\nimport img_8 from '../assets/images/japan.svg'\r\nimport {\r\n    cardType,\r\n    compareCardsActionType,\r\n    initialStateType,\r\n    isLoadingActionType,\r\n    openFirstCardActionType,\r\n    shufflingCardsPositionActionType,\r\n    victoryCaseActionType\r\n} from \"../types/cardsReducerTypes\";\r\nimport {AppStateType} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\n\r\nconst initialState: initialStateType = {\r\n    cards: [\r\n        {id: 0, img: img_1, title: 'one', isActive: false, isSelected: false},\r\n        {id: 1, img: img_1, title: 'one', isActive: false, isSelected: false},\r\n        {id: 2, img: img_2, title: 'two', isActive: false, isSelected: false},\r\n        {id: 3, img: img_2, title: 'two', isActive: false, isSelected: false},\r\n        {id: 4, img: img_3, title: 'three', isActive: false, isSelected: false},\r\n        {id: 5, img: img_3, title: 'three', isActive: false, isSelected: false},\r\n        {id: 6, img: img_4, title: 'four', isActive: false, isSelected: false},\r\n        {id: 7, img: img_4, title: 'four', isActive: false, isSelected: false},\r\n        {id: 8, img: img_5, title: 'five', isActive: false, isSelected: false},\r\n        {id: 9, img: img_5, title: 'five', isActive: false, isSelected: false},\r\n        {id: 10, img: img_6, title: 'six', isActive: false, isSelected: false},\r\n        {id: 11, img: img_6, title: 'six', isActive: false, isSelected: false},\r\n        {id: 12, img: img_7, title: 'seven', isActive: false, isSelected: false},\r\n        {id: 13, img: img_7, title: 'seven', isActive: false, isSelected: false},\r\n        {id: 14, img: img_8, title: 'eight', isActive: false, isSelected: false},\r\n        {id: 15, img: img_8, title: 'eight', isActive: false, isSelected: false},\r\n    ],\r\n    countClick: 1,\r\n    loading: false\r\n}\r\nconst cardsReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case FIRST_CARD_SHOW :\r\n            let activeCard = [...state.cards]\r\n            if (!action.card.isActive)\r\n                activeCard = activeCard.map((card: cardType) => {\r\n                    if (card.id === action.card.id) {\r\n                        return {...card, isActive: true}\r\n                    } else {\r\n                        return card\r\n                    }\r\n                })\r\n            return {\r\n                ...state, cards: activeCard\r\n            }\r\n        case MATCH_CARDS:\r\n            let showedCards = state.cards.filter((card: cardType) => card.isActive)\r\n            let newCards = [...state.cards]\r\n            let counterValue = state.countClick\r\n            if (showedCards[0].title === showedCards[1].title && showedCards[0].id !== showedCards[1].id) {\r\n                counterValue += 1\r\n                newCards = newCards.map(card => {\r\n                    if (card.id === showedCards[0].id || card.id === showedCards[1].id) {\r\n                        return {...card, isSelected: true, isActive: false}\r\n                    } else {\r\n                        return card\r\n                    }\r\n                })\r\n            } else {\r\n                counterValue += 1\r\n                newCards = newCards.map((card: cardType) => {\r\n                    return {...card, isActive: false}\r\n                })\r\n            }\r\n            return {\r\n                ...state,\r\n                cards: newCards,\r\n                countClick: counterValue\r\n            }\r\n        case LOADING_IN_PROCESS:\r\n            return {\r\n                ...state,\r\n                loading: !state.loading\r\n            }\r\n        case VICTORY_COMPLETE:\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map((card: cardType) => {\r\n                    return {\r\n                        ...card,\r\n                        isActive: false,\r\n                        isSelected: false\r\n                    }\r\n                }),\r\n                countClick: 1\r\n            }\r\n        case SET_RANDOM_POSITION_FOR_CARDS:\r\n            let randomCardPosition = [...state.cards]\r\n            let random = (array:Array<cardType>) => {\r\n                for (let i = array.length - 1; i > 0; i--) {\r\n                    let j = Math.floor(Math.random() * (i + 1));\r\n                    [array[i], array[j]] = [array[j], array[i]];\r\n                }\r\n            }\r\n            random(randomCardPosition)\r\n            return {\r\n                ...state,\r\n                cards: randomCardPosition\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\nexport default cardsReducer\r\n\r\nexport const openFirstCard = (card: cardType): openFirstCardActionType => ({type: FIRST_CARD_SHOW, card})\r\nexport const compareCards = (): compareCardsActionType => ({type: MATCH_CARDS})\r\nexport const isLoading = (): isLoadingActionType => ({type: LOADING_IN_PROCESS})\r\nexport const victoryCase = (): victoryCaseActionType => ({type: VICTORY_COMPLETE})\r\nexport const shufflingCardsPosition = (): shufflingCardsPositionActionType => ({type: SET_RANDOM_POSITION_FOR_CARDS})\r\n\r\ntype CardsActionType =\r\n    openFirstCardActionType\r\n    | compareCardsActionType\r\n    | isLoadingActionType\r\n    | victoryCaseActionType\r\n    | shufflingCardsPositionActionType\r\n\r\ntype ActionType = CardsActionType\r\n\r\n\r\n//thunk types\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionType>\r\n\r\nexport const showCard = (card: cardType) => (dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n    const state = getState()\r\n    const {cards} = state.reducer\r\n    let showCards = cards.filter(card => card.isActive)\r\n\r\n    if (!card.isSelected && !card.isActive) {\r\n        dispatch(openFirstCard(card))\r\n    }\r\n    if (showCards.length !== 0 && !card.isSelected && !card.isActive) {\r\n        dispatch(isLoading())\r\n        setTimeout(() => {\r\n            dispatch(compareCards())\r\n            dispatch(isLoading())\r\n        }, 1000)\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {showCard} from \"../../../../dal/cardsReducer\";\r\nimport click from '../../../../assets/sounds/click.mp3'\r\nimport {cardType} from \"../../../../types/cardsReducerTypes\";\r\n\r\ntype PropType = {\r\n    card:cardType\r\n    key:number\r\n}\r\nconst CardContainer: React.FC<PropType> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const openCard = () => {\r\n        dispatch(showCard(props.card))\r\n        new Audio(click).play()\r\n    }\r\n    return (\r\n        <Card card={props.card} openCard={openCard}/>\r\n    )\r\n}\r\nexport default CardContainer\r\n","import React from \"react\";\r\nimport CardContainer from \"./card/CardContainer\";\r\nimport styles from './Cards.module.css'\r\nimport {cardType} from \"../../../types/cardsReducerTypes\";\r\ntype PropType = {\r\n    cards:Array<cardType>\r\n    loading:boolean\r\n}\r\nconst Cards = (props: PropType) => {\r\n\r\n    const cardsElements = props.cards.map(card => <CardContainer key={card.id} card={card}/>)\r\n\r\n    const classForCards = props.loading ? `${styles.loading} ${styles.cards}` : styles.cards\r\n\r\n    return (\r\n        <div className={classForCards}>\r\n            {cardsElements}\r\n        </div>\r\n    )\r\n}\r\nexport default Cards\r\n","import React from \"react\";\r\nimport styles from './Button.module.css'\r\n\r\nconst Button = (props) => {\r\n\r\n    const onButtonClick = () => {\r\n        props.onClick()\r\n    }\r\n    return (\r\n        <button onClick={onButtonClick} className={styles.button}>{props.text}</button>\r\n    )\r\n}\r\nexport default Button\r\n","import React, {useState} from \"react\";\r\nimport Cards from \"./Cards\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Button from \"../../common/Button\";\r\nimport styles from './Cards.module.css'\r\nimport {shufflingCardsPosition, victoryCase} from \"../../../dal/cardsReducer\";\r\nimport winSound from '../../../assets/sounds/Sound_20947.mp3'\r\nimport {AppStateType} from \"../../../dal/store\";\r\n\r\nconst CardsContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [start, setStart] = useState(false)\r\n\r\n    const onButtonClick = () => {\r\n        dispatch(shufflingCardsPosition())\r\n        dispatch(victoryCase())\r\n        setStart(true)\r\n    }\r\n    const {cards, loading} = useSelector((state: AppStateType) => state.reducer)\r\n\r\n\r\n    if (cards.every(card => card.isSelected) && !start) {\r\n        return <div className={styles.contentWrapper}>\r\n            <audio src={winSound} autoPlay={true}/>\r\n            <h2 className={styles.header}>You won!</h2><Button onClick={onButtonClick} text={'play again'}/>\r\n        </div>\r\n    } else {\r\n        return (\r\n            <Cards cards={cards} loading={loading}/>\r\n        )\r\n    }\r\n}\r\nexport default CardsContainer\r\n","import React, {useState} from \"react\";\r\nimport CardsContainer from \"./cards/CardsContainer\";\r\nimport styles from './GamePage.module.css'\r\nimport Button from \"../common/Button\";\r\nimport {cardType} from \"../../types/cardsReducerTypes\";\r\n\r\ntype PropType = {\r\n    cards: Array<cardType>\r\n    onStartClick: () => void\r\n    counter: number\r\n}\r\nconst GamePage = (props: PropType) => {\r\n\r\n    const [start, setStart] = useState(false)\r\n\r\n    const onButtonClick = () => {\r\n        props.onStartClick()\r\n        setStart(true)\r\n    }\r\n\r\n\r\n    if (!start) {\r\n        return <div className={styles.gamePage}><Button onClick={onButtonClick} text={'START'}/></div>\r\n    }\r\n    return (\r\n        <>\r\n            <div className={styles.gamePage}><CardsContainer\r\n                // onStartClick={onButtonClick} probably unused\r\n            />\r\n                {props.cards.every(card => card.isSelected)\r\n                    ? ''\r\n                    : <div className={styles.counter}>\r\n                        <span>Round № {props.counter}</span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default GamePage\r\n","import React from \"react\";\r\nimport GamePage from \"./GamePage\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {shufflingCardsPosition} from \"../../dal/cardsReducer\";\r\nimport music from '../../assets/sounds/Dawn.mp3'\r\nimport {initialStateType} from \"../../types/cardsReducerTypes\";\r\nimport {AppStateType} from \"../../dal/store\";\r\n\r\nconst GamePageContainer = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const {countClick, cards} = useSelector((state: AppStateType) => state.reducer)\r\n    const onStartClick = () => {\r\n        dispatch(shufflingCardsPosition())\r\n        new Audio(music).play()\r\n    }\r\n\r\n    return (\r\n        <GamePage cards={cards} onStartClick={onStartClick} counter={countClick}/>\r\n    )\r\n}\r\nexport default GamePageContainer\r\n","import React from 'react';\nimport './App.css';\nimport GamePageContainer from \"./ui/gamePage/GamePageContainer\";\n\nfunction App() {\n\n    return (\n        <GamePageContainer/>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport cardsReducer from \"./cardsReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    reducer: cardsReducer\r\n})\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./dal/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}